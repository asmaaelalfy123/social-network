{"ast":null,"code":"import axios from 'axios';\nimport { REGISTER_FAIL, REGISTER_SUCCESS, LOAD_USER, AUTH_ERROR } from './types';\nimport setAuhtoken from '../utils/setAuthtoken';\nimport { setAlert } from './alerts';\n\nconst loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuhtoken();\n  }\n};\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["/home/asmaa/web development/DevConnector/client/src/actions/auth.js"],"names":["axios","REGISTER_FAIL","REGISTER_SUCCESS","LOAD_USER","AUTH_ERROR","setAuhtoken","setAlert","loadUser","dispatch","localStorage","token","register","name","email","password","config","headers","body","JSON","stringify","res","post","type","payload","data","err","errors","response","forEach","error","msg"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,gBAAxB,EAAyCC,SAAzC,EAAmDC,UAAnD,QAAqE,SAArE;AAEA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,SAASC,QAAT,QAAyB,UAAzB;;AAGA,MAAMC,QAAQ,GAAC,MAAI,MAAMC,QAAN,IAAgB;AAC/B,MAAGC,YAAY,CAACC,KAAhB,EAAsB;AAClBL,IAAAA,WAAW;AACd;AACJ,CAJD;;AAMA,OAAO,MAAMM,QAAQ,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA;AAAf,CAAD,KAA+B,MAAMN,QAAN,IAAkB;AACvE,QAAMO,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf;AAMA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEP,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAAf,CAAb;;AAEA,MAAI;AACF,UAAMM,GAAG,GAAG,MAAMpB,KAAK,CAACqB,IAAN,CAAW,YAAX,EAAyBJ,IAAzB,EAA+BF,MAA/B,CAAlB;AACAP,IAAAA,QAAQ,CAAC;AAAEc,MAAAA,IAAI,EAAEpB,gBAAR;AAA0BqB,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAAvC,KAAD,CAAR;AACD,GAHD,CAGE,OAAOC,GAAP,EAAY;AACZ,UAAMC,MAAM,GAAGD,GAAG,CAACE,QAAJ,CAAaH,IAAb,CAAkBE,MAAjC;;AACA,QAAIA,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAIrB,QAAQ,CAACF,QAAQ,CAACuB,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAhC;AACD;;AAEDtB,IAAAA,QAAQ,CAAC;AAAEc,MAAAA,IAAI,EAAErB;AAAR,KAAD,CAAR;AACD;AACF,CApBM","sourcesContent":["import axios from 'axios';\nimport { REGISTER_FAIL, REGISTER_SUCCESS,LOAD_USER,AUTH_ERROR } from './types';\n\nimport setAuhtoken from '../utils/setAuthtoken'\nimport { setAlert } from './alerts';\n\n\nconst loadUser=()=>async dispatch=>{\n    if(localStorage.token){\n        setAuhtoken()\n    }\n}\n\nexport const register = ({ name, email, password }) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  const body = JSON.stringify({ name, email, password });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({ type: REGISTER_SUCCESS, payload: res.data });\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({ type: REGISTER_FAIL });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}