{"ast":null,"code":"import axios from 'axios';\nimport { REGISTER_FAIL, REGISTER_SUCCESS, LOAD_USER, AUTH_ERROR } from './types';\nimport setAuhtoken from '../utils/setAuthtoken';\nimport { setAlert } from './alerts'; //load user\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuhtoken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: LOAD_USER,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; //register user\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; //login user\n\nexport const login = ({\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["/home/asmaa/web development/DevConnector/client/src/actions/auth.js"],"names":["axios","REGISTER_FAIL","REGISTER_SUCCESS","LOAD_USER","AUTH_ERROR","setAuhtoken","setAlert","loadUser","dispatch","localStorage","token","res","get","type","payload","data","error","register","name","email","password","config","headers","body","JSON","stringify","post","err","errors","response","forEach","msg","login"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {\n  REGISTER_FAIL,\n  REGISTER_SUCCESS,\n  LOAD_USER,\n  AUTH_ERROR\n} from './types';\n\nimport setAuhtoken from '../utils/setAuthtoken';\nimport { setAlert } from './alerts';\n\n\n//load user\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuhtoken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n\n    dispatch({ type: LOAD_USER, payload: res.data });\n  } catch (error) {\n      dispatch({type:AUTH_ERROR})\n  }\n};\n\n\n//register user\nexport const register = ({ name, email, password }) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  const body = JSON.stringify({ name, email, password });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({ type: REGISTER_SUCCESS, payload: res.data });\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({ type: REGISTER_FAIL });\n  }\n};\n\n\n//login user\nexport const login = ({  email, password }) => async dispatch => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n  \n    const body = JSON.stringify({  email, password });\n  \n    try {\n      const res = await axios.post('/api/users', body, config);\n      dispatch({ type: REGISTER_SUCCESS, payload: res.data });\n    } catch (err) {\n      const errors = err.response.data.errors;\n      if (errors) {\n        errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n      }\n  \n      dispatch({ type: REGISTER_FAIL });\n    }\n  };\n  "]},"metadata":{},"sourceType":"module"}